}
?strsplit
?paste()
get_two_combo <- function(OA){
n = OA
v1 <- 0:n
v2 <- n-v1
out <- data.frame(v1, v2)
symb <- paste(unlist(strsplit(deparse(substitute(OA)), "") ) ,2)
colnames(out) <- symb
return(out)
}
OA = 3
get_two_combo(OA)
unlist(strsplit(deparse(substitute(OA)), "") )
get_two_combo <- function(OA){
n = OA
v1 <- 0:n
v2 <- n-v1
out <- data.frame(v1, v2)
symb <- paste(unlist(strsplit(deparse(substitute(OA)), "") ) ,2, sep = "")
colnames(out) <- symb
return(out)
}
OA = 3
get_two_combo(OA)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='lidaidavid',
token='B23541B1A0C1B06D8ED3BBFD3E6227CA',
secret='GMIGUrqZfK31yv7+CWush7PkhGp50GHo4Mo6YjUO')
get_science_score <- function(a,o,e){
out <-  a^2 + o^2 + e^2 + 7 * min(a,o,e)
return(out)
}
get_two_combo <- function(OA){
n = OA
v1 <- 0:n
v2 <- n-v1
out <- data.frame(v1, v2)
symb <- paste(unlist(strsplit(deparse(substitute(OA)), "") ) ,2, sep = "")
colnames(out) <- symb
return(out)
}
get_three_combo <- function(AOE){
n = AOE
out = data.frame()
for (i in 0:n) {
OE = n-i
temp <- get_two_combo(OE)
d1 <- cbind(A2=i, temp)
out <- rbind(out, d1)
}
colnames(out) <- c("A3","O3", "E3")
return(out)
}
get_combination <- function(x, y){
left <- dplyr::slice(x,rep(1:n(), each = nrow(y)))
right <- dplyr::slice(y,rep(1:n(), nrow(x)))
out <- cbind(left, right)
return(out)
}
get_combo <- function(OE, AOE){
x <- get_two_combo(OE)
y <- get_three_combo(AOE)
out <- get_combination(x,y)
return(out)
}
get_n_symb <- function(last, v){
has_a <- str_detect(colnames(last), v)
if(sum(has_a)<=1){
out <- last[,has_a]
} else{  out <- rowSums(last[,has_a])
}
return(out)
}
get_sci <- function(A=0,O=0,E=0,AO = 0, AE=0, OE = 0, AOE = 0,plus = 0){
if (AO > 0) {
three <- get_combo(AO, AOE)
}else if (AE > 0){
three <- get_combo(AE, AOE)
}else if (OE > 0){
three <- get_combo(OE, AOE)
}else{three = data.frame()}
d <- data.frame(A,O,E)
if (nrow(three) == 0){
last = d
} else {
last <- get_combination(d,three)
}
last$a <- get_n_symb(last, "A")
last$o <- get_n_symb(last, "O")
last$e <- get_n_symb(last, "E")
omega <- select(last, a,o,e)
which_one_max <- character()
for (i in 1:nrow(omega)) {
which_one_max[i] <- colnames(omega)[which.max(omega[i,])]
}
alpha <- omega
for (i in 1:nrow(alpha)) {
alpha[i, which_one_max[i]] <- alpha[i, which_one_max[i]] + plus
}
alpha$score <- get_science_score(alpha$a, alpha$o, alpha$e)
alpha <- arrange(alpha,desc(score))
colnames(alpha) <- c("A", "O", "E", "score")
return(alpha)
}
get_sci(A = 0)
?str_detect
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
library(shiny)
get_science_score <- function(a,o,e){
out <-  a^2 + o^2 + e^2 + 7 * min(a,o,e)
return(out)
}
get_two_combo <- function(OA){
n = OA
v1 <- 0:n
v2 <- n-v1
out <- data.frame(v1, v2)
symb <- paste(unlist(strsplit(deparse(substitute(OA)), "") ) ,2, sep = "")
colnames(out) <- symb
return(out)
}
get_three_combo <- function(AOE){
n = AOE
out = data.frame()
for (i in 0:n) {
OE = n-i
temp <- get_two_combo(OE)
d1 <- cbind(A2=i, temp)
out <- rbind(out, d1)
}
colnames(out) <- c("A3","O3", "E3")
return(out)
}
get_combination <- function(x, y){
left <- dplyr::slice(x,rep(1:n(), each = nrow(y)))
right <- dplyr::slice(y,rep(1:n(), nrow(x)))
out <- cbind(left, right)
return(out)
}
get_combo <- function(OE, AOE){
x <- get_two_combo(OE)
y <- get_three_combo(AOE)
out <- get_combination(x,y)
return(out)
}
get_n_symb <- function(last, v){
has_a <- stringr::str_detect(colnames(last), v)
if(sum(has_a)<=1){
out <- last[,has_a]
} else{  out <- rowSums(last[,has_a])
}
return(out)
}
get_sci <- function(A=0,O=0,E=0,AO = 0, AE=0, OE = 0, AOE = 0,plus = 0){
if (AO > 0) {
three <- get_combo(AO, AOE)
}else if (AE > 0){
three <- get_combo(AE, AOE)
}else if (OE > 0){
three <- get_combo(OE, AOE)
}else{three = data.frame()}
d <- data.frame(A,O,E)
if (nrow(three) == 0){
last = d
} else {
last <- get_combination(d,three)
}
last$a <- get_n_symb(last, "A")
last$o <- get_n_symb(last, "O")
last$e <- get_n_symb(last, "E")
omega <- select(last, a,o,e)
which_one_max <- character()
for (i in 1:nrow(omega)) {
which_one_max[i] <- colnames(omega)[which.max(omega[i,])]
}
alpha <- omega
for (i in 1:nrow(alpha)) {
alpha[i, which_one_max[i]] <- alpha[i, which_one_max[i]] + plus
}
alpha$score <- get_science_score(alpha$a, alpha$o, alpha$e)
alpha <- arrange(alpha,desc(score))
colnames(alpha) <- c("A", "O", "E", "score")
return(alpha)
}
get_sci(A = 0)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
library(shiny)
get_science_score <- function(a,o,e){
out <-  a^2 + o^2 + e^2 + 7 * min(a,o,e)
return(out)
}
get_two_combo <- function(OA){
n = OA
v1 <- 0:n
v2 <- n-v1
out <- data.frame(v1, v2)
symb <- paste(unlist(strsplit(deparse(substitute(OA)), "") ) ,2, sep = "")
colnames(out) <- symb
return(out)
}
get_three_combo <- function(AOE){
n = AOE
out = data.frame()
for (i in 0:n) {
OE = n-i
temp <- get_two_combo(OE)
d1 <- cbind(A2=i, temp)
out <- rbind(out, d1)
}
colnames(out) <- c("A3","O3", "E3")
return(out)
}
get_combination <- function(x, y){
left <- dplyr::slice(x,rep(1:n(), each = nrow(y)))
right <- dplyr::slice(y,rep(1:n(), nrow(x)))
out <- cbind(left, right)
return(out)
}
get_combo <- function(OE, AOE){
x <- get_two_combo(OE)
y <- get_three_combo(AOE)
out <- get_combination(x,y)
return(out)
}
get_n_symb <- function(last, v){
has_a <- stringr::str_detect(colnames(last), v)
if(sum(has_a)<=1){
out <- last[,has_a]
} else{  out <- rowSums(last[,has_a])
}
return(out)
}
get_sci <- function(A=0,O=0,E=0,AO = 0, AE=0, OE = 0, AOE = 0,plus = 0){
if (AO > 0) {
three <- get_combo(AO, AOE)
}else if (AE > 0){
three <- get_combo(AE, AOE)
}else if (OE > 0){
three <- get_combo(OE, AOE)
}else{three = data.frame()}
d <- data.frame(A,O,E)
if (nrow(three) == 0){
last = d
} else {
last <- get_combination(d,three)
}
last$a <- get_n_symb(last, "A")
last$o <- get_n_symb(last, "O")
last$e <- get_n_symb(last, "E")
omega <- dplyr::select(last, a,o,e)
which_one_max <- character()
for (i in 1:nrow(omega)) {
which_one_max[i] <- colnames(omega)[which.max(omega[i,])]
}
alpha <- omega
for (i in 1:nrow(alpha)) {
alpha[i, which_one_max[i]] <- alpha[i, which_one_max[i]] + plus
}
alpha$score <- get_science_score(alpha$a, alpha$o, alpha$e)
alpha <- arrange(alpha,desc(score))
colnames(alpha) <- c("A", "O", "E", "score")
return(alpha)
}
get_sci(A = 0)
get_sci <- function(A=0,O=0,E=0,AO = 0, AE=0, OE = 0, AOE = 0,plus = 0){
if (AO > 0) {
three <- get_combo(AO, AOE)
}else if (AE > 0){
three <- get_combo(AE, AOE)
}else if (OE > 0){
three <- get_combo(OE, AOE)
}else{three = data.frame()}
d <- data.frame(A,O,E)
if (nrow(three) == 0){
last = d
} else {
last <- get_combination(d,three)
}
last$a <- get_n_symb(last, "A")
last$o <- get_n_symb(last, "O")
last$e <- get_n_symb(last, "E")
omega <- dplyr::select(last, a,o,e)
which_one_max <- character()
for (i in 1:nrow(omega)) {
which_one_max[i] <- colnames(omega)[which.max(omega[i,])]
}
alpha <- omega
for (i in 1:nrow(alpha)) {
alpha[i, which_one_max[i]] <- alpha[i, which_one_max[i]] + plus
}
alpha$score <- get_science_score(alpha$a, alpha$o, alpha$e)
alpha <- dplyr::arrange(alpha,desc(score))
colnames(alpha) <- c("A", "O", "E", "score")
return(alpha)
}
get_sci(A = 0)
get_sci(A = 2)
runApp("app")
getwd()
runApp("my_app")
runApp("app.R")
runApp("app.R")
runApp("app.R")
source("helpers.R")
?textOutput
?sliderInput
runApp("app.R")
runApp("app.R")
runApp("app.R")
runApp("app.R")\
runApp("app.R")
runApp("app.R")
runApp("app.R")
runApp("app.R")
A = 1
O = 2
E = 4
AO = 1
get_sci(A,O,E,AO)
get_sci(A=A,O=O,E=E,AO=AO)
source("D:/nuts/projects_active/sevenwonders/helpers.R", echo=TRUE)
runApp("app.R")
runApp("app.R")
?renderTable
runApp("app.R")
runApp("app.R")
rsconnect::setAccountInfo(name='lidaidavid', token='B23541B1A0C1B06D8ED3BBFD3E6227CA', secret='GMIGUrqZfK31yv7+CWush7PkhGp50GHo4Mo6YjUO')
runApp("app.R")
runApp("app.R")
runApp("app.R")
runApp("app.R")
runApp("app.R")
shiny::runApp()
runApp()
runApp()
runApp()
?card
?numericInput
?textInput
?value_box
get_total <- function(name, war, coin, wonder, blue, green, yellow, purple){
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple)
temp$total <- rowSums(temp[, 2:ncol(temp)])
temp$team1 <- temp$total[1:3]
temp$team2 <- temp$total[4:6]
return(temp)
}
get_total <- function(name, war=0, coin=0, wonder=0, blue=0, green=0, yellow=0, purple=0){
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple)
temp$total <- rowSums(temp[, 2:ncol(temp)])
temp$team1 <- temp$total[1:3]
temp$team2 <- temp$total[4:6]
return(temp)
}
name = letters[1:7]
get_total <- function(name, war=0, coin=0, wonder=0, blue=0, green=0, yellow=0, purple=0){
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple)
temp$total <- rowSums(temp[, 2:ncol(temp)])
temp$team1 <- temp$total[1:3]
temp$team2 <- temp$total[4:6]
return(temp)
}
get_total(name)
letters[1:7]
get_total <- function(name, war=0, coin=0, wonder=0, blue=0, green=0, yellow=0, purple=0){
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple)
temp$total <- rowSums(temp[, 2:ncol(temp)])
temp$team1 <- sum(temp$total[1:3])
temp$team2 <- sum(temp$total[4:6])
return(temp)
}
get_total(name)
get_total <- function(name, war=0, coin=0, wonder=0, blue=0, green=0, yellow=0, purple=0, black=0, white=0, ship=0, island=0){
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple,
black,
white,
ship,
island)
temp$total <- rowSums(temp[, 2:ncol(temp)])
temp$team1 <- sum(temp$total[1:3])
temp$team2 <- sum(temp$total[4:6])
return(temp)
}
runApp()
get_total <- function(name, war=0, coin=0, wonder=0, blue=0, green=0, yellow=0, purple=0, black=0, white=0, ship=0, island=0){
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple,
black,
white,
ship,
island)
np <- nrow(temp)
temp$total <- rowSums(temp[, 2:ncol(temp)])
if (np == 6) {
temp$team1 <- sum(temp$total[1:3])
temp$team2 <- sum(temp$total[4:6])
} else if(np ==4){
temp$team1 <- sum(temp$total[1:2])
temp$team2 <- sum(temp$total[3:4])
}
return(temp)
}
get_total(name)
sum(temp$total[1:3])
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple,
black,
white,
ship,
island)
war= coin= wonder= blue= green= yellow= purple= black= white= ship= island=0
get_total(name,war, coin, wonder, blue, green, yellow, purple, black, white, ship, island)
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple,
black,
white,
ship,
island)
np <- nrow(temp)
temp$total <- rowSums(temp[, 2:ncol(temp)])
temp
np
if (np == 6) {
temp$team1 <- sum(temp$total[1:3])
temp$team2 <- sum(temp$total[4:6])
} else if(np ==4){
temp$team1 <- sum(temp$total[1:2])
temp$team2 <- sum(temp$total[3:4])
} else {
temp$team1 <- sum(temp$total[1:7])
temp$team2 <- sum(temp$total[1:7])
}
temp
runApp()
runApp()
runApp()
?sidebarLayout
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
