runApp("app.R")
runApp("app.R")
shiny::runApp()
runApp()
runApp()
runApp()
?card
?numericInput
?textInput
?value_box
get_total <- function(name, war, coin, wonder, blue, green, yellow, purple){
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple)
temp$total <- rowSums(temp[, 2:ncol(temp)])
temp$team1 <- temp$total[1:3]
temp$team2 <- temp$total[4:6]
return(temp)
}
get_total <- function(name, war=0, coin=0, wonder=0, blue=0, green=0, yellow=0, purple=0){
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple)
temp$total <- rowSums(temp[, 2:ncol(temp)])
temp$team1 <- temp$total[1:3]
temp$team2 <- temp$total[4:6]
return(temp)
}
name = letters[1:7]
get_total <- function(name, war=0, coin=0, wonder=0, blue=0, green=0, yellow=0, purple=0){
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple)
temp$total <- rowSums(temp[, 2:ncol(temp)])
temp$team1 <- temp$total[1:3]
temp$team2 <- temp$total[4:6]
return(temp)
}
get_total(name)
letters[1:7]
get_total <- function(name, war=0, coin=0, wonder=0, blue=0, green=0, yellow=0, purple=0){
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple)
temp$total <- rowSums(temp[, 2:ncol(temp)])
temp$team1 <- sum(temp$total[1:3])
temp$team2 <- sum(temp$total[4:6])
return(temp)
}
get_total(name)
get_total <- function(name, war=0, coin=0, wonder=0, blue=0, green=0, yellow=0, purple=0, black=0, white=0, ship=0, island=0){
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple,
black,
white,
ship,
island)
temp$total <- rowSums(temp[, 2:ncol(temp)])
temp$team1 <- sum(temp$total[1:3])
temp$team2 <- sum(temp$total[4:6])
return(temp)
}
runApp()
get_total <- function(name, war=0, coin=0, wonder=0, blue=0, green=0, yellow=0, purple=0, black=0, white=0, ship=0, island=0){
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple,
black,
white,
ship,
island)
np <- nrow(temp)
temp$total <- rowSums(temp[, 2:ncol(temp)])
if (np == 6) {
temp$team1 <- sum(temp$total[1:3])
temp$team2 <- sum(temp$total[4:6])
} else if(np ==4){
temp$team1 <- sum(temp$total[1:2])
temp$team2 <- sum(temp$total[3:4])
}
return(temp)
}
get_total(name)
sum(temp$total[1:3])
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple,
black,
white,
ship,
island)
war= coin= wonder= blue= green= yellow= purple= black= white= ship= island=0
get_total(name,war, coin, wonder, blue, green, yellow, purple, black, white, ship, island)
temp <- data.frame(name,
war,
coin,
wonder,
blue,
green,
yellow,
purple,
black,
white,
ship,
island)
np <- nrow(temp)
temp$total <- rowSums(temp[, 2:ncol(temp)])
temp
np
if (np == 6) {
temp$team1 <- sum(temp$total[1:3])
temp$team2 <- sum(temp$total[4:6])
} else if(np ==4){
temp$team1 <- sum(temp$total[1:2])
temp$team2 <- sum(temp$total[3:4])
} else {
temp$team1 <- sum(temp$total[1:7])
temp$team2 <- sum(temp$total[1:7])
}
temp
runApp()
runApp()
runApp()
?sidebarLayout
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
OE = 0
get_two_combo(OE)
OE = 2
AE = 2
AO = 3
dt_OE <- get_two_combo(OE)
dt_AO <- get_two_combo(AO)
dt_AE <- get_two_combo(AE)
dt_OE
dt_AO
dt_AE
dplyr::left_join(dt_OE, dt_AO)
dt_two <- get_combination(OE, AO)
dt_OE
dt_two <- get_combination(dt_OE, dt_AO)
dt_two
dt_two <- get_combination(get_combination(dt_OE, dt_AO),dt_AE)
dt_OE
strsplit(deparse(substitute(OA)), "")
deparse(substitute(OA))
unlist(strsplit(deparse(substitute(OA)), "") )
deparse(substitute(OA))
get_two_combo <- function(OA){
n = OA
v1 <- 0:n
v2 <- n-v1
out <- data.frame(v1, v2)
symb <- paste(unlist(strsplit(deparse(substitute(OA)), "") ) ,deparse(substitute(OA)), sep = "_")
colnames(out) <- symb
return(out)
}
OE = 2
AE = 2
AO = 3
dt_OE <- get_two_combo(OE)
dt_AO <- get_two_combo(AO)
dt_AE <- get_two_combo(AE)
dt_two <- get_combination(get_combination(dt_OE, dt_AO),dt_AE)
dt_two
AOE = 2
dt_three <- get_three_combo(AOE)
dt_three
get_three_combo <- function(AOE){
n = AOE
out = data.frame()
for (i in 0:n) {
OE = n-i
temp <- get_two_combo(OE)
d1 <- cbind(A2=i, temp)
out <- rbind(out, d1)
}
colnames(out) <- c("A_AOE","O_AOE", "E_AOE")
return(out)
}
dt_three <- get_three_combo(AOE)
dt_three
OE = 0
AE = 0
AO = 3
dt_OE <- get_two_combo(OE)
dt_AO <- get_two_combo(AO)
dt_AE <- get_two_combo(AE)
dt_two <- get_combination(get_combination(dt_OE, dt_AO),dt_AE)
dt_two
dt_minus <- data.frame(A_cycle = c(-1,0,0),
O_cycle = c(0,-1,0),
E_cycle = c(0,0,-1))
dt_minus
A = 0
O = 1
E = 2
dt_minus <- data.frame(A_cycle = c(-1,0,0),
O_cycle = c(0,-1,0),
E_cycle = c(0,0,-1))
if(A == 0){dt_minus$A_cycle = 0}
if(O == 0){dt_minus$O_cycle = 0}
if(E == 0){dt_minus$E_cycle = 0}
dt_minus
dt_three
A = 0
O = 1
E = 2
AO = 0
AE = 1
OE = 0
AOE = 2
dt_OE <- get_two_combo(OE)
dt_AO <- get_two_combo(AO)
dt_AE <- get_two_combo(AE)
dt_two <- get_combination(get_combination(dt_OE, dt_AO),dt_AE)
if(cycle > 0){
AOE = AOE + 1
dt_minus <- data.frame(A_cycle = c(-1,0,0),
O_cycle = c(0,-1,0),
E_cycle = c(0,0,-1))
if(A == 0){dt_minus$A_cycle = 0}
if(O == 0){dt_minus$O_cycle = 0}
if(E == 0){dt_minus$E_cycle = 0}
}else{
dt_minus <- data.frame(A_cycle = c(0),
O_cycle = c(0),
E_cycle = c(0))
}
dt_OE <- get_two_combo(OE)
dt_AO <- get_two_combo(AO)
dt_AE <- get_two_combo(AE)
dt_two <- get_combination(get_combination(dt_OE, dt_AO),dt_AE)
dt_two
if(cycle > 0){
AOE = AOE + 1
dt_minus <- data.frame(A_cycle = c(-1,0,0),
O_cycle = c(0,-1,0),
E_cycle = c(0,0,-1))
if(A == 0){dt_minus$A_cycle = 0}
if(O == 0){dt_minus$O_cycle = 0}
if(E == 0){dt_minus$E_cycle = 0}
}else{
dt_minus <- data.frame(A_cycle = c(0),
O_cycle = c(0),
E_cycle = c(0))
}
cycle = 1
plus = 1
if(cycle > 0){
AOE = AOE + 1
dt_minus <- data.frame(A_cycle = c(-1,0,0),
O_cycle = c(0,-1,0),
E_cycle = c(0,0,-1))
if(A == 0){dt_minus$A_cycle = 0}
if(O == 0){dt_minus$O_cycle = 0}
if(E == 0){dt_minus$E_cycle = 0}
}else{
dt_minus <- data.frame(A_cycle = c(0),
O_cycle = c(0),
E_cycle = c(0))
}
dt_three <- get_three_combo(AOE)
dt_three
dt_minus
d <- data.frame(A,O,E)
d
dt_two
two <-
get_n_symb(dt_two, "A")
two
dt_two
dt_two$A <- get_n_symb(dt_two, "A")
dt_two
dt_two$A <- get_n_symb(dt_two, "A_")
dt_two$A
dt_two
dt_two$A <- get_n_symb(dt_two, "A_")
dt_two$O <- get_n_symb(dt_two, "O_")
dt_two$E <- get_n_symb(dt_two, "E_")
dt_two
get_n_symb_dt <- function(dt_two){
dt_two$A <- get_n_symb(dt_two, "A_")
dt_two$O <- get_n_symb(dt_two, "O_")
dt_two$E <- get_n_symb(dt_two, "E_")
out <- dplyr::select(dt_two, A, O, E )
return(out)
}
two <- get_n_symb_dt
two
two <- get_n_symb_dt(dt_two)
two
three <- get_n_symb_dt(dt_three)
three
dt_minus
minus <- get_n_symb_dt(dt_minus)
minus
d
get_combination(d,three)
last <-  get_combination(get_combination(get_combination(d,three), two), minus)
get_combination(d,three)
get_combination_plus <- function(x, y){
temp <- get_combination(x,y)
out <- temp[,1:3] + temp[,4:6]
return(out)
}
last <-  get_combination_plus(get_combination_plus(get_combination_plus(d,three), two), minus)
last
for (i in 1:nrow(last)) {
which_one_max[i] <- colnames(last)[which.max(last[i,])]
}
which_one_max <- character()
for (i in 1:nrow(last)) {
which_one_max[i] <- colnames(last)[which.max(last[i,])]
}
which_one_max
alpha <- last
for (i in 1:nrow(alpha)) {
alpha[i, which_one_max[i]] <- alpha[i, which_one_max[i]] + plus
}
alpha$score <- get_science_score(alpha$a, alpha$o, alpha$e)
alpha
alpha <- last
for (i in 1:nrow(alpha)) {
alpha[i, which_one_max[i]] <- alpha[i, which_one_max[i]] + plus
}
alpha$score <- get_science_score(alpha$A, alpha$O, alpha$E)
alpha <- dplyr::arrange(alpha,desc(score))
colnames(alpha) <- c("A", "O", "E", "score")
get_sci <- function(A=0,O=0,E=0,AO = 0, AE=0, OE = 0, AOE = 0, plus = 0, cycle = 0){
dt_OE <- get_two_combo(OE)
dt_AO <- get_two_combo(AO)
dt_AE <- get_two_combo(AE)
dt_two <- get_combination(get_combination(dt_OE, dt_AO),dt_AE)
if(cycle > 0){
AOE = AOE + 1
dt_minus <- data.frame(A_cycle = c(-1,0,0),
O_cycle = c(0,-1,0),
E_cycle = c(0,0,-1))
if(A == 0){dt_minus$A_cycle = 0}
if(O == 0){dt_minus$O_cycle = 0}
if(E == 0){dt_minus$E_cycle = 0}
}else{
dt_minus <- data.frame(A_cycle = c(0),
O_cycle = c(0),
E_cycle = c(0))
}
dt_three <- get_three_combo(AOE)
d <- data.frame(A,O,E)
two <- get_n_symb_dt(dt_two)
three <- get_n_symb_dt(dt_three)
minus <- get_n_symb_dt(dt_minus)
last <-  get_combination_plus(get_combination_plus(get_combination_plus(d,three), two), minus)
which_one_max <- character()
for (i in 1:nrow(last)) {
which_one_max[i] <- colnames(last)[which.max(last[i,])]
}
alpha <- last
for (i in 1:nrow(alpha)) {
alpha[i, which_one_max[i]] <- alpha[i, which_one_max[i]] + plus
}
alpha$score <- get_science_score(alpha$A, alpha$O, alpha$E)
alpha <- dplyr::arrange(alpha,desc(score))
colnames(alpha) <- c("A", "O", "E", "score")
return(alpha)
}
runApp()
runApp()
A = 0
O = 1
E = 1
AO = 0
AE = 0
OE = 0
AOE = 1
cycle = 0
plus = 1
dt_OE <- get_two_combo(OE)
dt_AO <- get_two_combo(AO)
dt_AE <- get_two_combo(AE)
dt_two <- get_combination(get_combination(dt_OE, dt_AO),dt_AE)
dt_OE <- get_two_combo(OE)
dt_AO <- get_two_combo(AO)
dt_AE <- get_two_combo(AE)
dt_two <- get_combination(get_combination(dt_OE, dt_AO),dt_AE)
if(cycle > 0){
AOE = AOE + 1
dt_minus <- data.frame(A_cycle = c(-1,0,0),
O_cycle = c(0,-1,0),
E_cycle = c(0,0,-1))
if(A == 0){dt_minus$A_cycle = 0}
if(O == 0){dt_minus$O_cycle = 0}
if(E == 0){dt_minus$E_cycle = 0}
}else{
dt_minus <- data.frame(A_cycle = c(0),
O_cycle = c(0),
E_cycle = c(0))
}
dt_three <- get_three_combo(AOE)
d <- data.frame(A,O,E)
two <- get_n_symb_dt(dt_two)
three <- get_n_symb_dt(dt_three)
minus <- get_n_symb_dt(dt_minus)
last <-  get_combination_plus(get_combination_plus(get_combination_plus(d,three), two), minus)
which_one_max <- character()
for (i in 1:nrow(last)) {
which_one_max[i] <- colnames(last)[which.max(last[i,])]
}
alpha <- last
for (i in 1:nrow(alpha)) {
alpha[i, which_one_max[i]] <- alpha[i, which_one_max[i]] + plus
}
alpha$score <- get_science_score(alpha$A, alpha$O, alpha$E)
alpha <- dplyr::arrange(alpha,desc(score))
colnames(alpha) <- c("A", "O", "E", "score")
alpha
dt_OE <- get_two_combo(OE)
dt_AO <- get_two_combo(AO)
dt_AE <- get_two_combo(AE)
dt_two <- get_combination(get_combination(dt_OE, dt_AO),dt_AE)
if(cycle > 0){
AOE = AOE + 1
dt_minus <- data.frame(A_cycle = c(-1,0,0),
O_cycle = c(0,-1,0),
E_cycle = c(0,0,-1))
if(A == 0){dt_minus$A_cycle = 0}
if(O == 0){dt_minus$O_cycle = 0}
if(E == 0){dt_minus$E_cycle = 0}
}else{
dt_minus <- data.frame(A_cycle = c(0),
O_cycle = c(0),
E_cycle = c(0))
}
dt_three <- get_three_combo(AOE)
d <- data.frame(A,O,E)
two <- get_n_symb_dt(dt_two)
three <- get_n_symb_dt(dt_three)
minus <- get_n_symb_dt(dt_minus)
last <-  get_combination_plus(get_combination_plus(get_combination_plus(d,three), two), minus)
which_one_max <- character()
for (i in 1:nrow(last)) {
which_one_max[i] <- colnames(last)[which.max(last[i,])]
}
alpha <- last
for (i in 1:nrow(alpha)) {
alpha[i, which_one_max[i]] <- alpha[i, which_one_max[i]] + plus
}
alpha
get_science_score <- function(a,o,e){
out <-  a^2 + o^2 + e^2 + 7 * min(a,o,e)
return(out)
}
get_science_score(alpha$A, alpha$O, alpha$E)
alpha
score_1 <-  alpha$A^2 + alpha$O^2 + alpha$E^2
score_1
score_2 <- apply(alpha, 1, min)
score_2
score_2 <- apply(alpha, 1, min) * 7
get_science_score <- function(alpha){
score_1 <-  alpha$A^2 + alpha$O^2 + alpha$E^2
score_2 <- apply(alpha, 1, min) * 7
out <- score_1 + score_2
return(out)
}
out
alpha$score <- get_science_score(alpha$A, alpha$O, alpha$E)
alpha$score <- get_science_score(alpha)
alpha
runApp()
